// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  nfcUid      String     @unique @map("nfc_uid")
  name        String     @db.VarChar(100)
  gender      String?    @db.VarChar(10)
  dateOfBirth DateTime   @map("date_of_birth") @db.Date
  birthPlace  String?    @map("birth_place") @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  fortunes    Fortune[]

  @@map("users")
}

model Fortune {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  fortuneDate           DateTime @map("fortune_date") @db.Date
  overallRating         Int      @map("overall_rating")
  healthFortune         String   @map("health_fortune") @db.Text
  healthSuggestion      String   @map("health_suggestion") @db.Text
  wealthFortune         String   @map("wealth_fortune") @db.Text
  interpersonalFortune  String   @map("interpersonal_fortune") @db.Text
  luckyColor            String   @map("lucky_color") @db.VarChar(50)
  actionSuggestion      String   @map("action_suggestion") @db.Text
  rawAiResponse         Json?    @map("raw_ai_response")
  createdAt             DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, fortuneDate])
  @@map("fortunes")
}
